// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phone         String?
  role          String    @default("customer") // customer, admin
  emailVerified DateTime?
  image         String?
  reviews       Review[]   // ✨ YENİ
  orders        Order[]
  addresses     Address[]
  favorites     Favorite[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String   // "Ev", "İş" vs
  fullName   String
  phone      String
  address    String
  city       String
  district   String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  image       String
  images      String[]
  stock       Int      @default(0)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  featured    Boolean  @default(false)
  favorites   Favorite[]
   reviews     Review[]   // ✨ YENİ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  
  // Müşteri Bilgileri
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  customerName    String
  customerEmail   String
  customerPhone   String
  
  // Teslimat Bilgileri
  deliveryAddress String
  deliveryCity    String
  deliveryDistrict String
  deliveryDate    DateTime
  deliveryTime    String
  
  // Sipariş Detayları
  items           Json
  subtotal        Float
  shipping        Float    @default(0)
  total           Float
  
  // Ödeme
  paymentMethod   String
  paymentStatus   String   @default("pending")
  
  // Sipariş Durumu
  status          String   @default("pending")
  notes           String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
//Favori ürünler modeli
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Aynı ürün birden fazla favoriye eklenemez
  @@index([userId])
  @@index([productId])
}
// Ürün Yorumları modeli
model Review {
  id          String   @id @default(cuid())
  
  // İlişkiler
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Yorum Detayları
  rating      Int      // 1-5 arası
  title       String?  // Yorum başlığı (opsiyonel)
  comment     String   // Yorum metni
  
  // Durum
  isApproved  Boolean  @default(false) // Admin onayı
  isVerified  Boolean  @default(false) // Doğrulanmış alıcı mı?
  
  // İstatistikler
  helpfulCount    Int   @default(0) // Kaç kişi faydalı buldu
  notHelpfulCount Int   @default(0) // Kaç kişi faydalı bulmadı
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Her kullanıcı bir ürüne sadece bir yorum yapabilir
  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
  @@index([isApproved])
}